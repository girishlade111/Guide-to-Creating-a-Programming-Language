<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Infographic: How to Create a Coding Language</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Energetic & Playful -->
    <!-- Application Structure Plan: The infographic follows a linear narrative structure, guiding the user from high-level philosophy to detailed implementation. Sections include: 1) An introduction to hook the user. 2) A "Core Philosophy" section using a radar chart to compare design paths. 3) An "Implementation Pipeline" section using a custom HTML/CSS flowchart. 4) A "Language Anatomy" section with donut charts for core constructs. 5) An "Ecosystem" section with a bar chart to show supporting elements. This top-down approach simplifies a complex topic into a digestible, visual story. -->
    <!-- Visualization & Content Choices: 
        - Data Point: Design Trade-offs (Performance vs. Flexibility) -> Goal: Compare -> Chosen Visualization: Radar Chart -> Justification: Effectively compares two distinct "profiles" across multiple shared axes (Execution, Typing, Memory), showing the shape of their trade-offs. -> Library/Method: Chart.js.
        - Data Point: Compiler Pipeline -> Goal: Organize/Show Process -> Chosen Visualization: Flow Chart -> Justification: A linear process is best represented by a sequential flowchart, making the stages and their order immediately clear. -> Library/Method: Structured HTML/CSS with Tailwind (NO SVG/Mermaid).
        - Data Point: Core Language Constructs -> Goal: Inform/Show Composition -> Chosen Visualization: Donut Charts -> Justification: Simple proportions are well-suited to donut charts, showing how different elements (e.g., types of control flow) contribute to the whole concept. -> Library/Method: Chart.js.
        - Data Point: Language Ecosystem Components -> Goal: Compare -> Chosen Visualization: Bar Chart -> Justification: A bar chart provides a straightforward comparison of the relative importance or development effort of different components (Runtime, Library, Tooling). -> Library/Method: Chart.js.
    -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #FDF0D5; /* Buttermilk */
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 500px;
            margin-left: auto;
            margin-right: auto;
            height: 350px;
            max-height: 400px;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 400px;
            }
        }
    </style>
</head>
<body class="text-[#003049]">

    <div class="container mx-auto p-4 md:p-8 max-w-5xl">

        <header class="text-center my-12">
            <h1 class="text-4xl md:text-6xl font-bold text-[#C1121F]">From Concept to Code</h1>
            <p class="mt-4 text-lg md:text-xl text-[#780000]">An Infographic Guide to Designing Your Own Programming Language</p>
        </header>

        <section class="my-16">
            <div class="bg-white rounded-lg shadow-xl p-6 md:p-8">
                <h2 class="text-3xl font-bold text-center text-[#003049]">The Architectural Blueprint</h2>
                <p class="text-center mt-2 mb-8 text-slate-600">Every language begins with a core philosophy. This involves balancing trade-offs between performance, safety, and flexibility. The chart below visualizes two common development paths, showing how initial decisions shape the language's character.</p>
                <div class="chart-container">
                    <canvas id="philosophyChart"></canvas>
                </div>
                <div class="mt-6 text-sm text-slate-500 text-center">
                    <p>The <span class="font-semibold text-[#C1121F]">Performance & Safety</span> path prioritizes speed and early error detection, typical of languages like C++ and Rust. The <span class="font-semibold text-[#669BBC]">Flexibility & Agility</span> path prioritizes developer speed and portability, seen in languages like Python and JavaScript.</p>
                </div>
            </div>
        </section>

        <section class="my-16">
            <h2 class="text-3xl font-bold text-center text-[#003049] mb-8">The Implementation Pipeline</h2>
            <p class="text-center mt-2 mb-12 max-w-3xl mx-auto text-slate-600">Transforming source text into an executable program is a multi-stage process. Each phase takes the output of the previous one and refines it, moving from abstract text to concrete machine instructions.</p>
            <div class="flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-2">
                <div class="text-center p-4 bg-white rounded-lg shadow-lg w-full md:w-1/5">
                    <div class="text-2xl font-bold text-[#780000]">1</div>
                    <h3 class="font-semibold mt-1">Lexical Analysis</h3>
                    <p class="text-xs text-slate-500 mt-1">Source code is broken into "tokens".</p>
                </div>
                <div class="text-2xl font-bold text-[#669BBC] transform md:rotate-0 rotate-90">&rarr;</div>
                <div class="text-center p-4 bg-white rounded-lg shadow-lg w-full md:w-1/5">
                    <div class="text-2xl font-bold text-[#780000]">2</div>
                    <h3 class="font-semibold mt-1">Parsing</h3>
                    <p class="text-xs text-slate-500 mt-1">Tokens are assembled into an Abstract Syntax Tree (AST).</p>
                </div>
                <div class="text-2xl font-bold text-[#669BBC] transform md:rotate-0 rotate-90">&rarr;</div>
                <div class="text-center p-4 bg-white rounded-lg shadow-lg w-full md:w-1/5">
                    <div class="text-2xl font-bold text-[#780000]">3</div>
                    <h3 class="font-semibold mt-1">Semantic Analysis</h3>
                    <p class="text-xs text-slate-500 mt-1">The AST is checked for logical correctness and type safety.</p>
                </div>
                <div class="text-2xl font-bold text-[#669BBC] transform md:rotate-0 rotate-90">&rarr;</div>
                <div class="text-center p-4 bg-white rounded-lg shadow-lg w-full md:w-1/5">
                    <div class="text-2xl font-bold text-[#780000]">4</div>
                    <h3 class="font-semibold mt-1">Optimization</h3>
                    <p class="text-xs text-slate-500 mt-1">The code is transformed to be more efficient.</p>
                </div>
                <div class="text-2xl font-bold text-[#669BBC] transform md:rotate-0 rotate-90">&rarr;</div>
                <div class="text-center p-4 bg-white rounded-lg shadow-lg w-full md:w-1/5">
                    <div class="text-2xl font-bold text-[#780000]">5</div>
                    <h3 class="font-semibold mt-1">Code Generation</h3>
                    <p class="text-xs text-slate-500 mt-1">The final machine code or bytecode is produced.</p>
                </div>
            </div>
        </section>

        <section class="my-16">
            <h2 class="text-3xl font-bold text-center text-[#003049] mb-8">Anatomy of a Language</h2>
            <p class="text-center mt-2 mb-12 max-w-3xl mx-auto text-slate-600">Every language is built from fundamental constructs that allow programmers to manage data, control program flow, and create abstractions.</p>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div class="bg-white rounded-lg shadow-xl p-6">
                    <h3 class="text-xl font-bold text-center mb-4">Data & Variables</h3>
                    <div class="chart-container h-64 max-h-64">
                        <canvas id="dataChart"></canvas>
                    </div>
                    <p class="text-sm text-slate-500 mt-4">Languages provide built-in primitive types (like integers and booleans) and allow for complex, user-defined composite types (like arrays and structs).</p>
                </div>
                <div class="bg-white rounded-lg shadow-xl p-6">
                    <h3 class="text-xl font-bold text-center mb-4">Control Flow</h3>
                    <div class="chart-container h-64 max-h-64">
                        <canvas id="controlChart"></canvas>
                    </div>
                     <p class="text-sm text-slate-500 mt-4">Control flow statements like conditionals (`if/else`) and loops (`for/while`) allow a program to make decisions and repeat actions.</p>
                </div>
                <div class="bg-white rounded-lg shadow-xl p-6">
                    <h3 class="text-xl font-bold text-center mb-4">Abstractions</h3>
                    <div class="chart-container h-64 max-h-64">
                        <canvas id="abstractionChart"></canvas>
                    </div>
                     <p class="text-sm text-slate-500 mt-4">Functions are the primary tool for abstraction, allowing code to be named, reused, and organized to manage complexity.</p>
                </div>
            </div>
        </section>

        <section class="my-16">
            <div class="bg-white rounded-lg shadow-xl p-6 md:p-8">
                <h2 class="text-3xl font-bold text-center text-[#003049]">More Than a Compiler: The Ecosystem</h2>
                <p class="text-center mt-2 mb-8 text-slate-600">A successful language needs more than just a translator. Its ecosystem—the runtime, libraries, and tools—is critical for developer adoption and productivity. The chart below shows the relative importance of these components.</p>
                <div class="chart-container h-80 max-h-80">
                    <canvas id="ecosystemChart"></canvas>
                </div>
            </div>
        </section>

    </div>

    <script>
        const wrapLabel = (label) => {
            const max = 16;
            if (label.length <= max) return label;
            const words = label.split(' ');
            const lines = [];
            let currentLine = '';
            for (const word of words) {
                if ((currentLine + ' ' + word).trim().length > max) {
                    lines.push(currentLine.trim());
                    currentLine = word;
                } else {
                    currentLine = (currentLine + ' ' + word).trim();
                }
            }
            if (currentLine) lines.push(currentLine.trim());
            return lines;
        };
        
        const tooltipTitleCallback = (tooltipItems) => {
            const item = tooltipItems[0];
            let label = item.chart.data.labels[item.dataIndex];
            return Array.isArray(label) ? label.join(' ') : label;
        };

        const energeticPlayful = {
            red: '#C1121F',
            maroon: '#780000',
            blue: '#669BBC',
            darkBlue: '#003049',
            buttermilk: '#FDF0D5',
        };

        new Chart(document.getElementById('philosophyChart'), {
            type: 'radar',
            data: {
                labels: ['Execution Speed', 'Type Safety (Early Errors)', 'Memory Control', 'Development Agility', 'Code Conciseness', 'Portability'],
                datasets: [{
                    label: 'Performance & Safety',
                    data: [9, 9, 8, 4, 5, 6],
                    backgroundColor: 'rgba(193, 18, 31, 0.2)',
                    borderColor: energeticPlayful.red,
                    pointBackgroundColor: energeticPlayful.red,
                }, {
                    label: 'Flexibility & Agility',
                    data: [5, 4, 3, 9, 9, 9],
                    backgroundColor: 'rgba(102, 155, 188, 0.2)',
                    borderColor: energeticPlayful.blue,
                    pointBackgroundColor: energeticPlayful.blue,
                }]
            },
            options: {
                maintainAspectRatio: false,
                scales: {
                    r: {
                        angleLines: { color: 'rgba(0, 48, 73, 0.2)' },
                        grid: { color: 'rgba(0, 48, 73, 0.2)' },
                        pointLabels: { font: { size: 12 }, color: energeticPlayful.darkBlue },
                        ticks: { backdropColor: '#FDF0D5', color: energeticPlayful.darkBlue },
                        suggestedMin: 0,
                        suggestedMax: 10
                    }
                },
                plugins: {
                    tooltip: { callbacks: { title: tooltipTitleCallback } }
                }
            }
        });

        const donutOptions = {
            maintainAspectRatio: false,
            responsive: true,
            plugins: {
                legend: { position: 'bottom', labels: { boxWidth: 15, padding: 15, color: energeticPlayful.darkBlue } },
                tooltip: { callbacks: { title: tooltipTitleCallback } }
            },
            cutout: '50%'
        };

        new Chart(document.getElementById('dataChart'), {
            type: 'doughnut',
            data: {
                labels: ['Primitive Types', 'Composite Types', 'Variables'],
                datasets: [{
                    data: [40, 35, 25],
                    backgroundColor: [energeticPlayful.red, energeticPlayful.blue, energeticPlayful.maroon],
                    borderColor: '#FFFFFF',
                    borderWidth: 2
                }]
            },
            options: donutOptions
        });

        new Chart(document.getElementById('controlChart'), {
            type: 'doughnut',
            data: {
                labels: ['Conditionals', 'Iteration (Loops)', 'Control Statements'],
                datasets: [{
                    data: [45, 40, 15],
                    backgroundColor: [energeticPlayful.red, energeticPlayful.blue, energeticPlayful.maroon],
                    borderColor: '#FFFFFF',
                    borderWidth: 2
                }]
            },
            options: donutOptions
        });
        
        new Chart(document.getElementById('abstractionChart'), {
            type: 'doughnut',
            data: {
                labels: ['Function Definitions', 'Parameters', 'Return Values'],
                datasets: [{
                    data: [50, 30, 20],
                    backgroundColor: [energeticPlayful.red, energeticPlayful.blue, energeticPlayful.maroon],
                    borderColor: '#FFFFFF',
                    borderWidth: 2
                }]
            },
            options: donutOptions
        });

        new Chart(document.getElementById('ecosystemChart'), {
            type: 'bar',
            data: {
                labels: [wrapLabel('Runtime Environment'), wrapLabel('Standard Library'), wrapLabel('Developer Tooling (IDE, Debugger)')],
                datasets: [{
                    label: 'Relative Importance/Effort',
                    data: [75, 85, 95],
                    backgroundColor: [energeticPlayful.maroon, energeticPlayful.blue, energeticPlayful.red],
                    borderRadius: 4
                }]
            },
            options: {
                indexAxis: 'y',
                maintainAspectRatio: false,
                scales: {
                    x: { grid: { display: false }, suggestedMax: 100 },
                    y: { grid: { display: false } }
                },
                plugins: {
                    legend: { display: false },
                    tooltip: { callbacks: { title: tooltipTitleCallback } }
                }
            }
        });
    </script>
</body>
</html>
